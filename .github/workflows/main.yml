name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19.10

      - name: Retrieve Version
        id: get_version
        run: |
          VERSION_FILE="version.go"
          OLD_VERSION=$(grep -oP 'const VERSION = "\K[^"]+' "$VERSION_FILE")
          echo "::set-output name=old_version::$OLD_VERSION"
      
      - name: Increment Version
        id: increment_version
        run: |
          VERSION_FILE="version.go"
          OLD_VERSION="${{ steps.get_version.outputs.old_version }}"
          IFS='.' read -r -a VERSION_PARTS <<< "$OLD_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          if [ "$PATCH" -eq 99 ]; then
            PATCH=0
            if [ "$MINOR" -eq 9 ]; then
              MINOR=0
              MAJOR=$((MAJOR + 1))
            else
              MINOR=$((MINOR + 1))
            fi
          else
            PATCH=$((10#$PATCH + 1))
          fi
          PATCH=$(printf "%02d" "$PATCH")
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "::set-output name=new_version::$NEW_VERSION"

          sed -i "s/const VERSION = \"$OLD_VERSION\"/const VERSION = \"$NEW_VERSION\"/" "$VERSION_FILE"
      
      
      # - name: Create Annotated Tag
      #   run: |
      #     git config --global user.email "you@example.com"
      #     git config --global user.name "Your Name"
      #     git tag -a v1.0 -m "Version 1.0"
      #     git push --follow-tags

      - name: Get Release Assets
        id: get_assets
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: releases } = await github.repos.listReleases({
              owner: 'shashankgITT', // Replace with the owner of Repo B
              repo: 'yocto-test',    // Replace with the name of Repo B
              per_page: 1,       // Only fetch the latest release
              tag: 'v1.0'        // Specify the tag name
            });
            console.log(releases[0].assets);
            core.setOutput('asset_url', releases[0].assets[0].browser_download_url);

      - name: Download Release Asset
        run: wget -O rogue-base-fw-som-7.1.01.tar.gz "${{ steps.get_assets.outputs.asset_url }}"

      - name: Print contents of example.txt from Repo B
        run: cat rogue-base-fw-som-7.1.01.tar.gz # Replace with the path to the file you want to access

        
